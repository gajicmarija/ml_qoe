# Hierarchical Token Bucket Implementation for OMNeT++ & INET Framework
# Copyright (C) 2021 Marija GajiÄ‡ (NTNU), Marcin Bosk (TUM), Susanna Schwarzmann (TU Berlin), Stanislav Lange (NTNU), and Thomas Zinner (NTNU)
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# 
[General]
sim-time-limit=250s
num-rngs = 1
seed-0-mt = 5
output-scalar-file-append = false
record-eventlog = false
#cmdenv-express-mode = false
#cmdenv-output-file = log.txt
#cmdenv-autoflush = true
#**.cmdenv-log-level = warn

*.visualizer.*.interfaceTableVisualizer.displayInterfaceTables = true

**.tcp.typename = "Tcp"
**.udp.typename = "Udp"

**.packetCapacity = 500

# tcp general settings
**.tcp.advertisedWindow = 65535                      # in bytes, corresponds with the maximal receiver buffer capacity (Note: normally, NIC queues should be at least this size)
**.tcp.delayedAcksEnabled = false                    # delayed ACK algorithm (RFC 1122) enabled/disabled
**.tcp.nagleEnabled = true                           # Nagle's algorithm (RFC 896) enabled/disabled
**.tcp.limitedTransmitEnabled = false                # Limited Transmit algorithm (RFC 3042) enabled/disabled (can be used for TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl)
**.tcp.increasedIWEnabled = false                    # Increased Initial Window (RFC 3390) enabled/disabled
**.tcp.sackSupport = false                           # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)
**.tcp.windowScalingSupport = false                  # Window Scale (RFC 1323) support (header option) (WS will be enabled for a connection if both endpoints support it)
**.tcp.timestampSupport = false                      # Timestamps (RFC 1323) support (header option) (TS will be enabled for a connection if both endpoints support it)
**.tcp.mss = 1452                                    # Maximum Segment Size (RFC 793) (header option)
**.tcp.tcpAlgorithmClass = "TcpReno"                 # TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl/DumbTCP

**.tcp.*.*.vector-recording = true
**.tcp.*.rtt.result-recording-modes = +vector
**.tcp.*.*.result-recording-modes = -vector
**.host*.app*.*.vector-recording = true
**.ppp.*xPk*.vector-recording = true
#**.ppp.queue.*.vector-recording = true
#**.ppp.queue.*.*.vector-recording = true
#*.router*.ppp[0].ppp.vector-recording = true
**.vector-recording = false

[Config liteCbaselineTestExampleTopoVisualizer]
description = "Visualize base topology"
network = mlEvaluations

sim-time-limit=400s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

*.visualizer.*.interfaceTableVisualizer.displayInterfaceTables = false

**.crcMode = "computed"

*.nVID = ${numCli=1,2,10,20,30,40,50,60,70,80} # Number of video clients
*.nLVD = ${numCli} # Number of file download clients
*.nFDO = ${numCli} # Number of file download clients
*.nSSH = ${numCli} # Number of SSH clients
*.nVIP = ${numCli} # Number of VoIP clients

**.numApps = 0

[Config liteCbaselineTestTokenQoS_base]
description = "All five applications - base configuration without any resource allocation"
network = mlEvaluations
sim-time-limit=400s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed"
*.host*.numApps = 1

#*.configurator.config = xmldoc("configs/baseQoS/routerConfigBaseHtbTest.xml")

# File download client
*.hostFDO[*].hasTcp = true
*.hostFDO[*].app[0].typename = "ml_qoe.apps.TcpFileDownloadApp"
*.hostFDO[*].app[0].localAddress = ""
*.hostFDO[*].app[0].localPort = -1 # port number to listen on
*.hostFDO[*].app[0].connectAddress = "serverFDO" # server address (may be symbolic)
*.hostFDO[*].app[0].connectPort = 1042 # port number to connect to
*.hostFDO[*].app[0].startTime = uniform(0.01s,1s) # time first session begins
*.hostFDO[*].app[0].stopTime = -1s # time of finishing sending, negative values mean forever
*.hostFDO[*].app[0].numRequestsPerSession = 1 # number of requests sent per session
*.hostFDO[*].app[0].requestLength = 800B # length of a request
*.hostFDO[*].app[0].replyLength = 10000KiB # length of a reply
*.hostFDO[*].app[0].thinkTime = 0.01s # time gap between requests
*.hostFDO[*].app[0].idleInterval = 1s # time gap between sessions
*.hostFDO[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect
*.hostFDO[*].app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.hostFDO[*].app[0].stopOperationTimeout = 2s # timeout value for lifecycle stop operation

# File download server
*.serverFDO.hasTcp = true
*.serverFDO.numApps = 1
*.serverFDO.app[0].typename = "TcpGenericServerApp"
*.serverFDO.app[0].localAddress = "" # local address; may be left empty ("")
*.serverFDO.app[0].localPort = 1042 # localPort number to listen on
*.serverFDO.app[0].replyDelay = 0s #
*.serverFDO.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.serverFDO.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation

# Video client
**.hostVID[*].hasTcp = true
**.hostVID[*].app[0].typename = "ml_qoe.apps.TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("")
**.hostVID[*].app[0].localPort = -1 # port number to listen on
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic)
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to
**.hostVID[*].app[0].dataTransferMode = "object"
**.hostVID[*].app[0].startTime = uniform(0.01s,1s) # time first session begins
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity
**.hostVID[*].app[0].idleInterval = 1s
**.hostVID[*].app[0].requestLength = 200B # length of a request
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session
**.hostVID[*].app[0].thinkTime = 1s # time gap between requests
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels)
**.hostVID[*].app[0].manifest_size = 100000
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds
**.hostVID[*].app[0].video_duration = int(uniform(240s,320s)) # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible"

# Video server
*.serverVID.hasTcp = true
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp"
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("")
*.serverVID.app[0].localPort = 1042 # localPort number to listen on
*.serverVID.app[0].replyDelay = 0s #
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.serverVID.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation

# Live Video client
**.hostLVD[*].hasTcp = true
**.hostLVD[*].app[0].typename = "ml_qoe.apps.TCPLiveVideoStreamCliAppLite"
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("")
**.hostLVD[*].app[0].localPort = -1 # port number to listen on
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic)
**.hostLVD[*].app[0].connectPort = 1043 # port number to connect to
**.hostLVD[*].app[0].dataTransferMode = "object"
**.hostLVD[*].app[0].startTime = uniform(0.01s,1s) # time first session begins
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity
**.hostLVD[*].app[0].idleInterval = 1s
**.hostLVD[*].app[0].requestLength = 200B # length of a request
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session
**.hostLVD[*].app[0].thinkTime = 1s # time gap between requests
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels)
**.hostLVD[*].app[0].manifest_size = 100000
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds
**.hostLVD[*].app[0].video_duration = int(uniform(40s,70s)) # video length in seconds
**.hostLVD[*].app[0].segment_length = 1s # video segment length in seconds
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible"
**.hostLVD[*].app[0].video_type = "live"
**.hostLVD[*].app[0].delay_threshold = 4
**.hostLVD[*].app[0].speedup_rate = 1.05

# Live Video server
*.serverLVD.hasTcp = true
*.serverLVD.numApps = 1
*.serverLVD.app[0].typename = "TcpGenericServerApp"
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1043 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s #
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation

# Remote Shell Client
**.hostSSH[*].hasTcp = true
**.hostSSH[*].app[0].typename = "ml_qoe.apps.TcpSimpleSshAppV2lite"
**.hostSSH[*].app[0].localAddress = "" # local address or empty ("")
**.hostSSH[*].app[0].localPort = -1 # local port number
**.hostSSH[*].app[0].connectAddress = "serverSSH" # server address (may be symbolic)
**.hostSSH[*].app[0].connectPort = 22  # port number to connect to
**.hostSSH[*].app[0].startTime = uniform(0.01s,1s) # time first session begins
**.hostSSH[*].app[0].stopTime = -1s # time of finishing sending, negative values mean forever
**.hostSSH[*].app[0].numCommands = 1 # user types this many commands in a session
**.hostSSH[*].app[0].commandLength = 10B # commands are this many characters (plus Enter)
**.hostSSH[*].app[0].keyPressDelay = 0.05s # delay between keypresses
**.hostSSH[*].app[0].commandOutputLength = 500B # commands produce this much output
**.hostSSH[*].app[0].thinkTime = 1s # user waits this much before starting to type new command
**.hostSSH[*].app[0].idleInterval = 1s # time gap between sessions
**.hostSSH[*].app[0].reconnectInterval = 1s # if connection breaks, user waits this much before trying to reconnect
**.hostSSH[*].app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
**.hostSSH[*].app[0].stopOperationTimeout = 2s # timeout value for lifecycle stop operation

# SSH server
*.serverSSH.hasTcp = true
*.serverSSH.numApps = 1
*.serverSSH.app[*].typename = "TcpGenericServerApp"
*.serverSSH.app[*].localAddress = "" # local address; may be left empty ("")
*.serverSSH.app[*].localPort = 22 # localPort number to listen on
*.serverSSH.app[*].replyDelay = 0s #
*.serverSSH.app[*].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.serverSSH.app[*].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation

# VoIP receiver
**.hostVIP[*].hasUdp = true
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver"
**.hostVIP[*].app[0].localPort = 2000
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio
**.hostVIP[*].app[0].playoutDelay = 20ms # initial delay for beginning playout after receiving the first packet
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet)

# VoIP sender
**.serverVIP.hasUdp = true
**.serverVIP.numApps = 1
**.serverVIP.app[*].typename = "SimpleVoipSender"
**.serverVIP.app[*].localPort = -1
**.serverVIP.app[*].destPort = 2000
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]"
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s)
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s)
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets
**.serverVIP.app[*].startTime = uniform(0.01s,1s) # time of start sending
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever



[Config qoeFlowsV85SlicesHTB_R100_Q35_M100_C100]
description = "Configuration for qoeFlowsV85SlicesHTB_R100_Q35_M100_C100. All five applications. QoS employed. Guarantee Multiplier: 1.0; Ceil multiplier: 1.0"

extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/qoeFlowsV85SlicesHTB_R100_Q35_M100_C100Routing.xml")

*.nVID = 50 # Number of video clients
*.nLVD = 28 # Number of live video client
*.nFDO = 5 # Number of file download clients
*.nSSH = 10 # Number of SSH clients
*.nVIP = 40 # Number of VoIP clients

*.router*.ppp[0].ppp.queue.typename = "HTBQueue"
*.router*.ppp[0].ppp.queue.numQueues = 133
*.router*.ppp[0].ppp.queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].ppp.queue.packetCapacity = -1
*.router*.ppp[0].ppp.queue.htbHysterisis = false
*.router*.ppp[0].ppp.queue.htbTreeConfig = xmldoc("configs/htbTree/qoeFlowsV85SlicesHTB_R100_Q35_M100_C100HTB.xml")
*.router*.ppp[0].ppp.queue.classifier.defaultGateIndex = 0
*.router*.ppp[0].ppp.queue.classifier.packetFilters = "*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*;*"
*.router0.ppp[0].ppp.queue.classifier.packetDataFilters = "sourceAddress(10.0.0.0);sourceAddress(10.0.0.4);sourceAddress(10.0.0.8);sourceAddress(10.0.0.12);sourceAddress(10.0.0.16);sourceAddress(10.0.0.20);sourceAddress(10.0.0.24);sourceAddress(10.0.0.28);sourceAddress(10.0.0.32);sourceAddress(10.0.0.36);sourceAddress(10.0.0.40);sourceAddress(10.0.0.44);sourceAddress(10.0.0.48);sourceAddress(10.0.0.52);sourceAddress(10.0.0.56);sourceAddress(10.0.0.60);sourceAddress(10.0.0.64);sourceAddress(10.0.0.68);sourceAddress(10.0.0.72);sourceAddress(10.0.0.76);sourceAddress(10.0.0.80);sourceAddress(10.0.0.84);sourceAddress(10.0.0.88);sourceAddress(10.0.0.92);sourceAddress(10.0.0.96);sourceAddress(10.0.0.100);sourceAddress(10.0.0.104);sourceAddress(10.0.0.108);sourceAddress(10.0.0.112);sourceAddress(10.0.0.116);sourceAddress(10.0.0.120);sourceAddress(10.0.0.124);sourceAddress(10.0.0.128);sourceAddress(10.0.0.132);sourceAddress(10.0.0.136);sourceAddress(10.0.0.140);sourceAddress(10.0.0.144);sourceAddress(10.0.0.148);sourceAddress(10.0.0.152);sourceAddress(10.0.0.156);sourceAddress(10.0.0.160);sourceAddress(10.0.0.164);sourceAddress(10.0.0.168);sourceAddress(10.0.0.172);sourceAddress(10.0.0.176);sourceAddress(10.0.0.180);sourceAddress(10.0.0.184);sourceAddress(10.0.0.188);sourceAddress(10.0.0.192);sourceAddress(10.0.0.196);sourceAddress(10.1.0.0);sourceAddress(10.1.0.4);sourceAddress(10.1.0.8);sourceAddress(10.1.0.12);sourceAddress(10.1.0.16);sourceAddress(10.1.0.20);sourceAddress(10.1.0.24);sourceAddress(10.1.0.28);sourceAddress(10.1.0.32);sourceAddress(10.1.0.36);sourceAddress(10.1.0.40);sourceAddress(10.1.0.44);sourceAddress(10.1.0.48);sourceAddress(10.1.0.52);sourceAddress(10.1.0.56);sourceAddress(10.1.0.60);sourceAddress(10.1.0.64);sourceAddress(10.1.0.68);sourceAddress(10.1.0.72);sourceAddress(10.1.0.76);sourceAddress(10.1.0.80);sourceAddress(10.1.0.84);sourceAddress(10.1.0.88);sourceAddress(10.1.0.92);sourceAddress(10.1.0.96);sourceAddress(10.1.0.100);sourceAddress(10.1.0.104);sourceAddress(10.1.0.108);sourceAddress(10.2.0.0);sourceAddress(10.2.0.4);sourceAddress(10.2.0.8);sourceAddress(10.2.0.12);sourceAddress(10.2.0.16);sourceAddress(10.3.0.0);sourceAddress(10.3.0.4);sourceAddress(10.3.0.8);sourceAddress(10.3.0.12);sourceAddress(10.3.0.16);sourceAddress(10.3.0.20);sourceAddress(10.3.0.24);sourceAddress(10.3.0.28);sourceAddress(10.3.0.32);sourceAddress(10.3.0.36);sourceAddress(10.3.0.40);sourceAddress(10.3.0.44);sourceAddress(10.3.0.48);sourceAddress(10.3.0.52);sourceAddress(10.3.0.56);sourceAddress(10.3.0.60);sourceAddress(10.3.0.64);sourceAddress(10.3.0.68);sourceAddress(10.3.0.72);sourceAddress(10.3.0.76);sourceAddress(10.3.0.80);sourceAddress(10.3.0.84);sourceAddress(10.3.0.88);sourceAddress(10.3.0.92);sourceAddress(10.3.0.96);sourceAddress(10.3.0.100);sourceAddress(10.3.0.104);sourceAddress(10.3.0.108);sourceAddress(10.3.0.112);sourceAddress(10.3.0.116);sourceAddress(10.3.0.120);sourceAddress(10.3.0.124);sourceAddress(10.3.0.128);sourceAddress(10.3.0.132);sourceAddress(10.3.0.136);sourceAddress(10.3.0.140);sourceAddress(10.3.0.144);sourceAddress(10.3.0.148);sourceAddress(10.3.0.152);sourceAddress(10.3.0.156);sourceAddress(10.4.0.0);sourceAddress(10.4.0.4);sourceAddress(10.4.0.8);sourceAddress(10.4.0.12);sourceAddress(10.4.0.16);sourceAddress(10.4.0.20);sourceAddress(10.4.0.24);sourceAddress(10.4.0.28);sourceAddress(10.4.0.32);sourceAddress(10.4.0.36)"
*.router1.ppp[0].ppp.queue.classifier.packetDataFilters = "destinationAddress(10.0.0.0);destinationAddress(10.0.0.4);destinationAddress(10.0.0.8);destinationAddress(10.0.0.12);destinationAddress(10.0.0.16);destinationAddress(10.0.0.20);destinationAddress(10.0.0.24);destinationAddress(10.0.0.28);destinationAddress(10.0.0.32);destinationAddress(10.0.0.36);destinationAddress(10.0.0.40);destinationAddress(10.0.0.44);destinationAddress(10.0.0.48);destinationAddress(10.0.0.52);destinationAddress(10.0.0.56);destinationAddress(10.0.0.60);destinationAddress(10.0.0.64);destinationAddress(10.0.0.68);destinationAddress(10.0.0.72);destinationAddress(10.0.0.76);destinationAddress(10.0.0.80);destinationAddress(10.0.0.84);destinationAddress(10.0.0.88);destinationAddress(10.0.0.92);destinationAddress(10.0.0.96);destinationAddress(10.0.0.100);destinationAddress(10.0.0.104);destinationAddress(10.0.0.108);destinationAddress(10.0.0.112);destinationAddress(10.0.0.116);destinationAddress(10.0.0.120);destinationAddress(10.0.0.124);destinationAddress(10.0.0.128);destinationAddress(10.0.0.132);destinationAddress(10.0.0.136);destinationAddress(10.0.0.140);destinationAddress(10.0.0.144);destinationAddress(10.0.0.148);destinationAddress(10.0.0.152);destinationAddress(10.0.0.156);destinationAddress(10.0.0.160);destinationAddress(10.0.0.164);destinationAddress(10.0.0.168);destinationAddress(10.0.0.172);destinationAddress(10.0.0.176);destinationAddress(10.0.0.180);destinationAddress(10.0.0.184);destinationAddress(10.0.0.188);destinationAddress(10.0.0.192);destinationAddress(10.0.0.196);destinationAddress(10.1.0.0);destinationAddress(10.1.0.4);destinationAddress(10.1.0.8);destinationAddress(10.1.0.12);destinationAddress(10.1.0.16);destinationAddress(10.1.0.20);destinationAddress(10.1.0.24);destinationAddress(10.1.0.28);destinationAddress(10.1.0.32);destinationAddress(10.1.0.36);destinationAddress(10.1.0.40);destinationAddress(10.1.0.44);destinationAddress(10.1.0.48);destinationAddress(10.1.0.52);destinationAddress(10.1.0.56);destinationAddress(10.1.0.60);destinationAddress(10.1.0.64);destinationAddress(10.1.0.68);destinationAddress(10.1.0.72);destinationAddress(10.1.0.76);destinationAddress(10.1.0.80);destinationAddress(10.1.0.84);destinationAddress(10.1.0.88);destinationAddress(10.1.0.92);destinationAddress(10.1.0.96);destinationAddress(10.1.0.100);destinationAddress(10.1.0.104);destinationAddress(10.1.0.108);destinationAddress(10.2.0.0);destinationAddress(10.2.0.4);destinationAddress(10.2.0.8);destinationAddress(10.2.0.12);destinationAddress(10.2.0.16);destinationAddress(10.3.0.0);destinationAddress(10.3.0.4);destinationAddress(10.3.0.8);destinationAddress(10.3.0.12);destinationAddress(10.3.0.16);destinationAddress(10.3.0.20);destinationAddress(10.3.0.24);destinationAddress(10.3.0.28);destinationAddress(10.3.0.32);destinationAddress(10.3.0.36);destinationAddress(10.3.0.40);destinationAddress(10.3.0.44);destinationAddress(10.3.0.48);destinationAddress(10.3.0.52);destinationAddress(10.3.0.56);destinationAddress(10.3.0.60);destinationAddress(10.3.0.64);destinationAddress(10.3.0.68);destinationAddress(10.3.0.72);destinationAddress(10.3.0.76);destinationAddress(10.3.0.80);destinationAddress(10.3.0.84);destinationAddress(10.3.0.88);destinationAddress(10.3.0.92);destinationAddress(10.3.0.96);destinationAddress(10.3.0.100);destinationAddress(10.3.0.104);destinationAddress(10.3.0.108);destinationAddress(10.3.0.112);destinationAddress(10.3.0.116);destinationAddress(10.3.0.120);destinationAddress(10.3.0.124);destinationAddress(10.3.0.128);destinationAddress(10.3.0.132);destinationAddress(10.3.0.136);destinationAddress(10.3.0.140);destinationAddress(10.3.0.144);destinationAddress(10.3.0.148);destinationAddress(10.3.0.152);destinationAddress(10.3.0.156);destinationAddress(10.4.0.0);destinationAddress(10.4.0.4);destinationAddress(10.4.0.8);destinationAddress(10.4.0.12);destinationAddress(10.4.0.16);destinationAddress(10.4.0.20);destinationAddress(10.4.0.24);destinationAddress(10.4.0.28);destinationAddress(10.4.0.32);destinationAddress(10.4.0.36)"

**.connFIX0.datarate = 100000000bps
**.connFIX0.delay = 40ms






















[Config demoNoSlice]
description = "HTB Evaluation scenario I"
network = mlEvaluations
sim-time-limit=3600s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed"

*.host*.numApps = 9
**.hostFDO[0].hasTcp = true
**.hostFDO[0].hasUdp = true

*.serverFDO.hasTcp = true
*.serverFDO.hasUdp = true
*.serverFDO.numApps = 9

*.configurator.config = xmldoc("configs/baseQoS/router_htbEvalI.xml")

# Video clients
**.hostFDO[0].app[0..2].typename = "htb_demo.apps.TCPVideoStreamCliAppV2"
**.hostFDO[0].app[0..2].localAddress = "" # may be left empty ("")
**.hostFDO[0].app[0..2].localPort = -1 # port number to listen on
**.hostFDO[0].app[0..2].connectAddress = "serverFDO" # server address (may be symbolic)
**.hostFDO[0].app[0..2].connectPort = 1042 + index # port number to connect to
**.hostFDO[0].app[0..2].dataTransferMode = "object"
**.hostFDO[0].app[0..2].startTime = uniform(0.001s,3s) # time first session begins
**.hostFDO[0].app[0..2].stopTime = -1s # time of finish sending, 0 means infinity
**.hostFDO[0].app[0..2].idleInterval = 1s
**.hostFDO[0].app[0..2].requestLength = 200B # length of a request
**.hostFDO[0].app[0..2].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect
**.hostFDO[0].app[0..2].numRequestsPerSession = 1 # number of requests sent per session
**.hostFDO[0].app[0..2].thinkTime = 1s # time gap between requests
**.hostFDO[0].app[0..2].video_resolution = "360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels)
**.hostFDO[0].app[0..2].manifest_size = 100000
**.hostFDO[0].app[0..2].video_buffer_max_length = 17s # buffer max length in seconds
**.hostFDO[0].app[0].video_duration = 40s # video length in seconds
**.hostFDO[0].app[1].video_duration = 40s # video length in seconds
**.hostFDO[0].app[2].video_duration = 40s # video length in seconds
**.hostFDO[0].app[0..2].segment_length = 2s # video segment length in seconds
**.hostFDO[0].app[0..2].useFlexibleBitrate = "flexible"
**.hostFDO[0].app[0..2].useAvgForLiveMonitoring = true


# TCP file download client
*.hostFDO[0].app[3..5].typename = "htb_demo.apps.TcpBasicClientAppCustom"
*.hostFDO[0].app[3..5].localAddress = ""
*.hostFDO[0].app[3..5].localPort = -1 # port number to listen on
*.hostFDO[0].app[3..5].connectAddress = "serverFDO" # server address (may be symbolic)
*.hostFDO[0].app[3..5].connectPort = 1042 + index # port number to connect to
*.hostFDO[0].app[3..5].numRequestsPerSession = 1 # number of requests sent per session
*.hostFDO[0].app[3..5].requestLength = 500B # length of a request
*.hostFDO[0].app[3..5].replyLength = 3000KiB
*.hostFDO[0].app[3..5].thinkTime = 0.01s # time gap between requests
*.hostFDO[0].app[3..5].idleInterval = 0.1s # time gap between sessions
*.hostFDO[0].app[3..5].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect
*.hostFDO[0].app[3..5].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.hostFDO[0].app[3..5].stopOperationTimeout = 2s # timeout value for lifecycle stop operation
*.hostFDO[0].app[3..5].startTime = 0.001s # time first session begins
*.hostFDO[0].app[3..5].stopTime = -1s # time of finishing sending, negative values mean forever


# UDP file download client
*.hostFDO[0].app[6..8].typename = "htb_demo.apps.UdpSinkCustom"
*.hostFDO[0].app[6..8].localAddress = ""
*.hostFDO[0].app[6..8].localPort = 1042 + index # port number to listen on
*.hostFDO[0].app[6..8].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.hostFDO[0].app[6..8].stopOperationTimeout = 2s # timeout value for lifecycle stop operation

*.hostFDO[0].app[6..8].startTime = 0s # time first session begins
*.hostFDO[0].app[6..8].stopTime = -1s # time of finishing sending, negative values mean forever


# TCP servers

*.serverFDO.app[0..5].typename = "TcpGenericServerApp"
*.serverFDO.app[0..5].localAddress = "" # local address; may be left empty ("")
*.serverFDO.app[0..5].localPort = 1042 + index # localPort number to listen on
*.serverFDO.app[0..5].replyDelay = 0s
*.serverFDO.app[0..5].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.serverFDO.app[0..5].stopOperationTimeout  = 2s

# UDP server
*.serverFDO.app[6..8].typename = "htb_demo.apps.UdpBasicAppCustom"
*.serverFDO.app[6..8].destAddresses = "hostFDO[0]"
*.serverFDO.app[6..8].destPort = 1042 + index
*.serverFDO.app[6..8].messageLength = 1465B
*.serverFDO.app[6..8].sendInterval = 0.1ms
*.serverFDO.app[6..8].packetName = "UDPData"
*.serverFDO.app[6..8].localAddress = "" # local address; may be left empty ("")
*.serverFDO.app[6..8].localPort = -1 # localPort number to listen on
*.serverFDO.app[6..8].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.serverFDO.app[6..8].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation

*.serverFDO.app[6..8].startTime = replaceUnit(0.001, "s") # time first session begins

*.nFDO =  1

*.hostFDO[0].ppp[0].ppp.queue.typename = "HtbQueue"
*.hostFDO[0].ppp[0].ppp.queue.numQueues = 9
*.hostFDO[0].ppp[0].ppp.queue.queue[*].typename = "DropTailQueue"
*.hostFDO[0].ppp[0].ppp.queue.htbHysterisis = false
*.hostFDO[0].ppp[0].ppp.queue.htbTreeConfig = xmldoc("tree_demoNoSlice.xml")
*.hostFDO[0].ppp[0].ppp.queue.queue[*].packetCapacity = 500
*.hostFDO[0].ppp[0].ppp.queue.classifier.defaultGateIndex = 1
*.hostFDO[0].ppp[0].ppp.queue.classifier.packetFilters="*;*;*;*;*;*;*;*;*"
*.hostFDO[0].ppp[0].ppp.queue.classifier.packetDataFilters ="inet::tcp::TcpHeader and destPort =~ 1042; inet::tcp::TcpHeader and destPort =~ 1043; inet::tcp::TcpHeader and destPort =~ 1044; inet::tcp::TcpHeader and destPort =~ 1045; inet::tcp::TcpHeader and destPort =~ 1046; inet::tcp::TcpHeader and destPort =~ 1047;inet::UdpHeader and srcPort =~ 1048;inet::UdpHeader and srcPort =~ 1049;inet::UdpHeader and srcPort =~ 1050"


*.serverFDO*.ppp[0].ppp.queue.typename = "HtbQueue"
*.serverFDO*.ppp[0].ppp.queue.numQueues = 9
*.serverFDO*.ppp[0].ppp.queue.queue[*].typename = "DropTailQueue"
*.serverFDO*.ppp[0].ppp.queue.htbHysterisis = false
*.serverFDO*.ppp[0].ppp.queue.htbTreeConfig = xmldoc("tree_demoNoSlice.xml")
*.serverFDO*.ppp[0].ppp.queue.queue[*].packetCapacity = 500
*.serverFDO*.ppp[0].ppp.queue.classifier.defaultGateIndex = 1
*.serverFDO*.ppp[0].ppp.queue.classifier.packetFilters ="*;*;*;*;*;*;*;*;*"
*.serverFDO*.ppp[0].ppp.queue.classifier.packetDataFilters ="inet::tcp::TcpHeader and srcPort =~ 1042; inet::tcp::TcpHeader and srcPort =~ 1043; inet::tcp::TcpHeader and srcPort =~ 1044; inet::tcp::TcpHeader and srcPort =~ 1045; inet::tcp::TcpHeader and srcPort =~ 1046; inet::tcp::TcpHeader and srcPort =~ 1047;inet::UdpHeader and destPort =~ 1048;inet::UdpHeader and destPort =~ 1049;inet::UdpHeader and destPort =~ 1050"


**.connFIX0.datarate = 10Mbps
**.connFIX0.delay = 1ms

[Config demoSlice]
description = "HTB Evaluation scenario I"
network = mlEvaluations
sim-time-limit=3600s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed"

*.host*.numApps = 9
**.hostFDO[0].hasTcp = true
**.hostFDO[0].hasUdp = true

*.serverFDO.hasTcp = true
*.serverFDO.hasUdp = true
*.serverFDO.numApps = 9

*.configurator.config = xmldoc("configs/baseQoS/router_htbEvalI.xml")

# Video clients
**.hostFDO[0].app[0..2].typename = "htb_demo.apps.TCPVideoStreamCliAppV2"
**.hostFDO[0].app[0..2].localAddress = "" # may be left empty ("")
**.hostFDO[0].app[0..2].localPort = -1 # port number to listen on
**.hostFDO[0].app[0..2].connectAddress = "serverFDO" # server address (may be symbolic)
**.hostFDO[0].app[0..2].connectPort = 1042 + index # port number to connect to
**.hostFDO[0].app[0..2].dataTransferMode = "object"
**.hostFDO[0].app[0..2].startTime = uniform(0.001s,3s) # time first session begins
**.hostFDO[0].app[0..2].stopTime = -1s # time of finish sending, 0 means infinity
**.hostFDO[0].app[0..2].idleInterval = 1s
**.hostFDO[0].app[0..2].requestLength = 200B # length of a request
**.hostFDO[0].app[0..2].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect
**.hostFDO[0].app[0..2].numRequestsPerSession = 1 # number of requests sent per session
**.hostFDO[0].app[0..2].thinkTime = 1s # time gap between requests
**.hostFDO[0].app[0..2].video_resolution = "360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels)
**.hostFDO[0].app[0..2].manifest_size = 100000
**.hostFDO[0].app[0..2].video_buffer_max_length = 17s # buffer max length in seconds
**.hostFDO[0].app[0].video_duration = 40s # video length in seconds
**.hostFDO[0].app[1].video_duration = 45s # video length in seconds
**.hostFDO[0].app[2].video_duration = 50s # video length in seconds
**.hostFDO[0].app[0..2].segment_length = 2s # video segment length in seconds
**.hostFDO[0].app[0..2].useFlexibleBitrate = "flexible"
**.hostFDO[0].app[0..2].useAvgForLiveMonitoring = true


# TCP file download client
*.hostFDO[0].app[3..5].typename = "htb_demo.apps.TcpBasicClientAppCustom"
*.hostFDO[0].app[3..5].localAddress = ""
*.hostFDO[0].app[3..5].localPort = -1 # port number to listen on
*.hostFDO[0].app[3..5].connectAddress = "serverFDO" # server address (may be symbolic)
*.hostFDO[0].app[3..5].connectPort = 1042 + index # port number to connect to
*.hostFDO[0].app[3..5].numRequestsPerSession = 1 # number of requests sent per session
*.hostFDO[0].app[3..5].requestLength = 500B # length of a request
*.hostFDO[0].app[3..5].replyLength = 3000KiB
*.hostFDO[0].app[3..5].thinkTime = 0.01s # time gap between requests
*.hostFDO[0].app[3..5].idleInterval = 0.1s # time gap between sessions
*.hostFDO[0].app[3..5].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect
*.hostFDO[0].app[3..5].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.hostFDO[0].app[3..5].stopOperationTimeout = 2s # timeout value for lifecycle stop operation
*.hostFDO[0].app[3..5].startTime = 0.001s # time first session begins
*.hostFDO[0].app[3..5].stopTime = -1s # time of finishing sending, negative values mean forever


# UDP file download client
*.hostFDO[0].app[6..8].typename = "htb_demo.apps.UdpSinkCustom"
*.hostFDO[0].app[6..8].localAddress = ""
*.hostFDO[0].app[6..8].localPort = 1042 + index # port number to listen on
*.hostFDO[0].app[6..8].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.hostFDO[0].app[6..8].stopOperationTimeout = 2s # timeout value for lifecycle stop operation

*.hostFDO[0].app[6..8].startTime = 0s # time first session begins
*.hostFDO[0].app[6..8].stopTime = -1s # time of finishing sending, negative values mean forever


# TCP servers

*.serverFDO.app[0..5].typename = "TcpGenericServerApp"
*.serverFDO.app[0..5].localAddress = "" # local address; may be left empty ("")
*.serverFDO.app[0..5].localPort = 1042 + index # localPort number to listen on
*.serverFDO.app[0..5].replyDelay = 0s
*.serverFDO.app[0..5].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.serverFDO.app[0..5].stopOperationTimeout  = 2s

# UDP server
*.serverFDO.app[6..8].typename = "htb_demo.apps.UdpBasicAppCustom"
*.serverFDO.app[6..8].destAddresses = "hostFDO[0]"
*.serverFDO.app[6..8].destPort = 1042 + index
*.serverFDO.app[6..8].messageLength = 1465B
*.serverFDO.app[6..8].sendInterval = 0.1ms
*.serverFDO.app[6..8].packetName = "UDPData"
*.serverFDO.app[6..8].localAddress = "" # local address; may be left empty ("")
*.serverFDO.app[6..8].localPort = -1 # localPort number to listen on
*.serverFDO.app[6..8].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.serverFDO.app[6..8].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation

*.serverFDO.app[6..8].startTime = replaceUnit(0.001, "s") # time first session begins

*.nFDO =  1

*.hostFDO[0].ppp[0].ppp.queue.typename = "HtbQueue"
*.hostFDO[0].ppp[0].ppp.queue.numQueues = 9
*.hostFDO[0].ppp[0].ppp.queue.queue[*].typename = "DropTailQueue"
*.hostFDO[0].ppp[0].ppp.queue.htbHysterisis = false
*.hostFDO[0].ppp[0].ppp.queue.htbTreeConfig = xmldoc("tree_demoSlice.xml")
*.hostFDO[0].ppp[0].ppp.queue.queue[*].packetCapacity = 500
*.hostFDO[0].ppp[0].ppp.queue.classifier.defaultGateIndex = 1
*.hostFDO[0].ppp[0].ppp.queue.classifier.packetFilters="*;*;*;*;*;*;*;*;*"
*.hostFDO[0].ppp[0].ppp.queue.classifier.packetDataFilters ="inet::tcp::TcpHeader and destPort =~ 1042; inet::tcp::TcpHeader and destPort =~ 1043; inet::tcp::TcpHeader and destPort =~ 1044; inet::tcp::TcpHeader and destPort =~ 1045; inet::tcp::TcpHeader and destPort =~ 1046; inet::tcp::TcpHeader and destPort =~ 1047;inet::UdpHeader and srcPort =~ 1048;inet::UdpHeader and srcPort =~ 1049;inet::UdpHeader and srcPort =~ 1050"


*.serverFDO*.ppp[0].ppp.queue.typename = "HtbQueue"
*.serverFDO*.ppp[0].ppp.queue.numQueues = 9
*.serverFDO*.ppp[0].ppp.queue.queue[*].typename = "DropTailQueue"
*.serverFDO*.ppp[0].ppp.queue.htbHysterisis = false
*.serverFDO*.ppp[0].ppp.queue.htbTreeConfig = xmldoc("tree_demoSlice.xml")
*.serverFDO*.ppp[0].ppp.queue.queue[*].packetCapacity = 500
*.serverFDO*.ppp[0].ppp.queue.classifier.defaultGateIndex = 1
*.serverFDO*.ppp[0].ppp.queue.classifier.packetFilters ="*;*;*;*;*;*;*;*;*"
*.serverFDO*.ppp[0].ppp.queue.classifier.packetDataFilters ="inet::tcp::TcpHeader and srcPort =~ 1042; inet::tcp::TcpHeader and srcPort =~ 1043; inet::tcp::TcpHeader and srcPort =~ 1044; inet::tcp::TcpHeader and srcPort =~ 1045; inet::tcp::TcpHeader and srcPort =~ 1046; inet::tcp::TcpHeader and srcPort =~ 1047;inet::UdpHeader and destPort =~ 1048;inet::UdpHeader and destPort =~ 1049;inet::UdpHeader and destPort =~ 1050"


**.connFIX0.datarate = 10Mbps
**.connFIX0.delay = 1ms
